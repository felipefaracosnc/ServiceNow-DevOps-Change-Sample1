# This workflow uses ServiceNow custom actions that are certified by ServiceNow.

name: CD GitHub workflow

on: workflow_dispatch
#   workflow_run:
#     workflows: [ "CI GitHub workflow" ]
#     types: [completed]

jobs:
  registerPackage:
    name: 'Register Package'
    runs-on: ubuntu-latest
    steps:
    - name: ServiceNow DevOps Register Package
    # You may pin to the exact commit or the version.           
      uses: ServiceNow/servicenow-devops-register-package@dev
      with:
          # Devops Integration Token
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Orchestration Tool Id of the tool created in ServiceNow
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Github Context
          context-github: ${{ toJSON(github) }}
          # List of Artifacts in JSON format
          artifacts: '[
              {
                  "name": "devops-ci2.jar",
                  "version": "1.2",
                  "semanticVersion": "1.2.0",
                  "repositoryName": "${{ github.repository }}"
              }
          ]'
          # Name of the Package that contains list of artifacts
          package-name: 'devops-change-velocity2.war'
          # Display Name of Job
          job-name: 'Register Package'


  change:
    # jobs that must complete successfully before this job will run
    needs: registerPackage
    # type of machine to run the job on
    runs-on: ubuntu-latest
    name: 'ServiceNow DevOps Change Automation'
    outputs:
      changeRequestNumber: ${{ steps.create_change.outputs.change-request-number }}
      changeRequestSysId: ${{ steps.create_change.outputs.change-request-sys-id }}
    steps:
      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20'
      - name: ServiceNow Change
        id: create_change
        uses: ServiceNow/servicenow-devops-change@dev
        with:
          # Devops Integration Token
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # GitHub Context
          context-github: ${{ toJSON(github) }}
          # Display Name of the Job
          job-name: 'ServiceNow DevOps Change Automation'
          change-request: '{"setCloseCode": "true","autoCloseChange": true,"attributes": {"chg_model":{"name": "DevOps Simplified"}, "short_description": "GitHub - (load-testing)","description": "GitHub Automated Software Deployment.","assigned_to" :{"name": "Abraham Lincoln"},"work_notes": "Check out this awesome CR","implementation_plan": "Software update is tested and results can befound in Test Summaries Tab","backout_plan": "When software fails in production, the previous software release will be re-deployed.","test_plan": "Testing if the software was successfully deployed"}}'
          #change-request: '{"attributes":{"type":"normal"}}'
          # You can specify the requested_by attribute either with name or sys_id. Example: "requested_by":{"name": "Test User"} or "requested_by": "62826bf03710200044e0bfc8bcbe5df1"
          # You can specify the assignment_group attribute either with name or sys_id. Example: "assignment_group":{"name": "Change Approval Team"} or "assignment_group": "5f721d93c0a8010e015533746de18bf9"
          # start_date: Enter the planned start date
          # end_date: Enter the planned end date
          deployment-gate: '{"environment":"env_deployment_gates","jobName":"ServiceNow DevOps Get Change"}'
          abortOnChangeCreationFailure: false
          interval: 100
          timeout:
          changeCreationTimeOut:
      - name: Output of ServiceNow DevOps Change Automation
        run: |
          echo 'Output of ServiceNow DevOps Change Automation is change-request-number = ${{ steps.create_change.outputs.change-request-number }}' >> $GITHUB_OUTPUT
          echo 'Output of ServiceNow DevOps Change Automation is change-request-sys-id = ${{ steps.create_change.outputs.change-request-sys-id }}' >> $GITHUB_OUTPUT

  getChange:
    # jobs that must complete successfully before this job will run
    needs: change
    # type of machine to run the job on
    runs-on: ubuntu-latest
    name: 'ServiceNow DevOps Get Change'
    environment: env_deployment_gates
    outputs:
      changeRequestNumber: ${{ steps.getchange.outputs.change-request-number }}
    steps:
      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20'    
      - name: ServiceNow DevOps Get Change
        id: getchange
        # You may pin to the exact commit or the version.
        # uses: ServiceNow/servicenow-devops-get-change@38d27ed6413d88e7b7fa9a7db248a2caaaf09596
        uses: ServiceNow/servicenow-devops-get-change@dev
        with:
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # # Devops Integration User Name
          # devops-integration-user-name: # optional
          # # Devops Integration User Password
          # devops-integration-user-password: ${{ secrets.SN_DEVOPS_TOKEN }}
          # Devops Integration Token
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Github Context
          context-github: ${{ toJSON(github) }}
          # The inputs to identify change at Servicenow and GET it.
          #change-details: '{"build_number":"${{ github.run_id }}","pipeline_name":"${{ github.repository }}/${{ github.workflow }}","stage_name":"ServiceNow DevOps Change Automation", "attempt_number": ""}'
          #change-details: '{"build_number":"","pipeline_name":"${{ github.repository }}/${{ github.workflow }}","stage_name":"", "attempt_number": ""}'
          change-details: '{"build_number":"","pipeline_name":"","stage_name":"ServiceNow DevOps Change Automation"}'
      - name: Output of ServiceNow DevOps Get Change
        run: |
          echo 'Output of ServiceNow DevOps Get Change Automation is change-request-number = ${{ steps.getchange.outputs.change-request-number }}' >> $GITHUB_OUTPUT 

  # change:
  #   # jobs that must complete successfully before this job will run
  #   needs: registerPackage
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: 'ServiceNow DevOps Change Automation'
  #   steps:
  #     - name: ServiceNow Change
  #       uses: ServiceNow/servicenow-devops-change@v3.0.0
  #       with:
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         # Orchestration Tool Id
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # GitHub Context
  #         context-github: ${{ toJSON(github) }}
  #         # Display Name of the Job
  #         job-name: 'ServiceNow DevOps Change Automation'
  #         change-request: '{"attributes":{"chg_model":{"name":"DevOps"}, "requested_by":{"name": "DevOps System"},"assignment_group":{"name": "Change management"},"priority": "2","comments": "This is a sample pipeline script to be added in your change step","work_notes": "Update this to work_notes","start_date": "","end_date": ""}}'
  #         # You can specify the requested_by attribute either with name or sys_id. Example: "requested_by":{"name": "Test User"} or "requested_by": "62826bf03710200044e0bfc8bcbe5df1"
  #         # You can specify the assignment_group attribute either with name or sys_id. Example: "assignment_group":{"name": "Change Approval Team"} or "assignment_group": "5f721d93c0a8010e015533746de18bf9"
  #         # start_date: Enter the planned start date
  #         # end_date: Enter the planned end date

  deploy:
    name: 'Deploy'
    needs: getChange
    runs-on: ubuntu-latest
    steps:
    - name: Run deployment scripts
      run: echo 'Deployment step in progress...'
